...쿼리 연습 + 쓸 것 모아두기

select level, cateName, cateCode, cateCodeRef from goods_category
    start with cateCodeRef is null connect by prior cateCode = cateCodeRef;

---카테고리 용 start 

 select * from product where category_id=${value};
밸류는 100~ 700까지 
카테고리 id는 포린키.

select a.product_name, a.product_price, a.product_image, a.product_thumb,
 a.product_option1, a.product_option2, a.product_option3, a.product_option4, a.product_option5,
 b.category_name from `product` as a left join `category` as b on b.category_id=100;
//////
select a.product_id, a.product_name, a.product_price, a.product_image, a.product_thumb,
  a.product_option1, a.product_option2, a.product_option3, a.product_option4, a.product_option5,
  b.category_name, b.category_id from `product` as a left join `category` as b on b.category_id=#{value};

-----------카테고리용 end

------------상품 좋아요 start

///상품/ id 당 1회 만 추천 가능하도록 중복검사
select count(*) from ex_rec where board_no = #{no} and rec_id = #{id}
..like table에 회원 id / 상품 id 가 존재하는 지 여부를 찾아야 함. 
경우의 수는 2가지임 0인 경우 추천 x 1인 경우 추천 o   따라서, 테이블 데이터가 있느냐?

like 자동 증가 coulmn 은 나중에  상품ID에 따른 추천수 총량을 찾기 위함임.

if(return 값이 1일 경우.){
	select count(*) from `like` where member_id='admin' and product_id=1;  ====반환 1일 경우?
	동일 아이디에 동일 상품 추천을 누른 상황임. 따라서 추천수 증가 X	

}else(return 값이 0일 경우. {

	insert query문 실행.	
	insert into `like` (null, member_id, product_id) values (null,#{member_id}, #{product_id});
}
///////

///상품 좋아요 등록
	insert into `like` (null, member_id, product_id) values (null,#{member_id}, #{product_id});
///////

///상품 좋아요 취소
	delete from `like` where member_id=#{member_id} and product_id=#{product_id};
///////

///상품 추천수 조회
select count(*) from `like` where product_id=#{상품번호}  상품번호에 따른 추천수 조회  --> 메인페이지에서 상품 목록에 상품 추천 수 표시하기 위함.
//////


------------상품 좋아요 end
/////메인 페이지 --> 추천 // 비추천으로 구분
높은 추천 수 조회 페이지 --> 현재 추천 수량을 표시. & 추천 높은 순으로 정렬.




///////////////////////////////
	product_main 상품 추천수 full outer 조인 쿼리
--->>>
UNION 사용해서 조인함 유의사항 ::: select 하는 컬럼의 갯수는 동일 + 데이터 타입++순서도 맞춰야 함....도 동일해야함. 

(SELECT ... FROM t1 LEFT JOIN t2 ON t1.name = t2.name)
UNION
(SELECT ... FROM t2 LEFT JOIN t1 ON t1.name = t2.name)

select * from a left join b on a.id = b.id union select * from b left join a on a.id = b.id 와같은 형식으로 해야 
레프트 조인 두번으로 풀아우터조인가능
<<<-----
select a.category_id, a.product_id, a.product_name, a.product_content, a.product_price, a.product_stock, a.product_date, a.product_image, a.product_thumb, a.product_option1, a.product_option2, a.product_option3, a.product_option4, a.product_option5,b.product_id, b.like_id, b.member_id from `product` as a left join `like` as b on a.product_id=b.product_id union select a.like_id, a.member_id, a.product_id,b.category_id, b.product_id, b.product_name, b.product_content, b.product_price, b.product_stock, b.product_date, b.product_image, b.product_thumb, b.product_option1, b.product_option2, b.product_option3, b.product_option4, b.product_option5 from `like` as a  left join `product` as b on a.product_id=b.product_id ;

///////// value값 넣어서 카테고리 별로 출력할 수 있도록 해야 함 밑에 쿼리문
		select a.category_id, a.product_id, a.product_name, a.product_content, a.product_price, a.product_stock, a.product_date,
		  a.product_image, a.product_thumb, a.product_option1, a.product_option2, a.product_option3, a.product_option4, a.product_option5, 
		  b.product_id, b.like_id, b.member_id from `product` as a left join `like` as b on a.product_id=b.product_id 
		  where a.category_id=#{value} 
		union select b.category_id, b.product_id, b.product_name,b.product_content, b.product_price, b.product_stock, b.product_date,
		 b.product_image, b.product_thumb, b.product_option1, b.product_option2, b.product_option3, b.product_option4, b.product_option5, 
		 a.product_id, a.like_id, a.member_id from `like` as a  left join `product` as b on a.product_id=b.product_id 
		 where b.category_id=#{value};
///////////////////// b. category_id 에는 mybatis #{value} 로 처리해야함



















