// 스프링 절대경로 :> C:\Companion\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\Companion\
...쿼리 연습 + 쓸 것 모아두기


장바구니 폼에 들어가는 것. productDetailOne.product_name   //  {productDetailOne.product_id 

// cart_quantity 는 order_detail_quantity로 처리 할 것.

///insert into `cart` values (랜덤상수,#{member_id},#{product_id},#{cart_quantity});





select level, cateName, cateCode, cateCodeRef from goods_category
    start with cateCodeRef is null connect by prior cateCode = cateCodeRef;

---카테고리 용 start 

 select * from product where category_id=${value};
밸류는 100~ 700까지 
카테고리 id는 포린키.

select a.product_name, a.product_price, a.product_image, a.product_thumb,
 a.product_option1, a.product_option2, a.product_option3, a.product_option4, a.product_option5,
 b.category_name from `product` as a left join `category` as b on b.category_id=100;
//////
select a.product_id, a.product_name, a.product_price, a.product_image, a.product_thumb,
  a.product_option1, a.product_option2, a.product_option3, a.product_option4, a.product_option5,
  b.category_name, b.category_id from `product` as a left join `category` as b on b.category_id=#{value};

-----------카테고리용 end

------------상품 좋아요 start

///상품/ id 당 1회 만 추천 가능하도록 중복검사
select count(*) from ex_rec where board_no = #{no} and rec_id = #{id}
..like table에 회원 id / 상품 id 가 존재하는 지 여부를 찾아야 함. 
경우의 수는 2가지임 0인 경우 추천 x 1인 경우 추천 o   따라서, 테이블 데이터가 있느냐?

like 자동 증가 coulmn 은 나중에  상품ID에 따른 추천수 총량을 찾기 위함임.

if(return 값이 1일 경우.){
	select count(*) from `like` where member_id='admin' and product_id=1;  ====반환 1일 경우?
	동일 아이디에 동일 상품 추천을 누른 상황임. 따라서 추천수 증가 X	

}else(return 값이 0일 경우. {

	insert query문 실행.	
	insert into `like` (null, member_id, product_id) values (null,#{member_id}, #{product_id});
}
///////

///상품 좋아요 등록
	insert into `like` (null, member_id, product_id) values (null,#{member_id}, #{product_id});

insert into `like` values(default,#{member_id},#{product_id});

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
update `like` set like_id = like_id+1 where product_id=1 and member_id='회원9';
회원 아이디 체크 반드시 해야함 
상품 아이디는 여러개인데 멤버 아이디만 다른 경우에는 
상품ID에 해당하는 모든 상품의 추천 개수가 증가하기 때문.
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

///////

///상품 좋아요 취소
	delete from `like` where member_id=#{member_id} and product_id=#{product_id};
///////

///상품 추천수 조회
select count(*) from `like` where product_id=#{상품번호}  상품번호에 따른 추천수 조회  --> 메인페이지에서 상품 목록에 상품 추천 수 표시하기 위함.
//////


------------상품 좋아요 end
/////메인 페이지 --> 추천 // 비추천으로 구분
높은 추천 수 조회 페이지 --> 현재 추천 수량을 표시. & 추천 높은 순으로 정렬.


http://localhost:8080/companion/imgs/shopping/%EA%B0%84%EC%8B%9D.jpg



///////////////////////////////
	product_main 상품 추천수 full outer 조인 쿼리
--->>>
UNION 사용해서 조인함 유의사항 ::: select 하는 컬럼의 갯수는 동일 + 데이터 타입++순서도 맞춰야 함....도 동일해야함. 

(SELECT ... FROM t1 LEFT JOIN t2 ON t1.name = t2.name)
UNION
(SELECT ... FROM t2 LEFT JOIN t1 ON t1.name = t2.name)

select * from a left join b on a.id = b.id union select * from b left join a on a.id = b.id 와같은 형식으로 해야 
레프트 조인 두번으로 풀아우터조인가능
<<<-----
select a.category_id, a.product_id, a.product_name, a.product_content, a.product_price, a.product_stock, a.product_date, a.product_image, a.product_thumb, a.product_option1, a.product_option2, a.product_option3, a.product_option4, a.product_option5,b.product_id, b.like_id, b.member_id from `product` as a left join `like` as b on a.product_id=b.product_id union select a.like_id, a.member_id, a.product_id,b.category_id, b.product_id, b.product_name, b.product_content, b.product_price, b.product_stock, b.product_date, b.product_image, b.product_thumb, b.product_option1, b.product_option2, b.product_option3, b.product_option4, b.product_option5 from `like` as a  left join `product` as b on a.product_id=b.product_id ;

///////// value값 넣어서 카테고리 별로 출력할 수 있도록 해야 함 밑에 쿼리문
(추천수도 찾을 수 있게 변경함.)
		select a.category_id, a.product_id, a.product_name, a.product_content, a.product_price, a.product_stock, a.product_date,
		  a.product_image, a.product_thumb, a.product_option1, a.product_option2, a.product_option3, a.product_option4, a.product_option5, 
		  b.product_id, (select count(*) from `like` l where a.product_id = l.product_id) as `like_id`, b.member_id from `product` as a left join `like` as b on 		  				  a.product_id=b.product_id 
		  where a.category_id=#{value} 
		union select b.category_id, b.product_id, b.product_name,b.product_content, b.product_price, b.product_stock, b.product_date,
		 b.product_image, b.product_thumb, b.product_option1, b.product_option2, b.product_option3, b.product_option4, b.product_option5, 
		 a.product_id, (select count(*) from `like` l where b.product_id = l.product_id) as `like_id`, a.member_id from `like` as a  left join `product` as b on 		 				 a.product_id=b.product_id 
		 where b.category_id=#{value}; 

///////////////////// b. category_id 에는 mybatis #{value} 로 처리해야함



----------------------------product_detail_page 답글 기능 -----------------
<!-- 답글 입력 -->

insert into `question` values (default,100,null,#{product_id},#{member_id},now(),null,#{question_title},#{question_content},null,null,default,default);

<!-- 답글 조회 -->
select * from `question` where product_id=#{value}

----------------------------product_detail_page 답글 기능 -----------------

////////////////주문 결제 버튼 누를 시 

insert into `order` 
values 
(default,#{member_name},now(),(select product_price from product where product_id = #{product_id}),#{order_name},null,#{order_phone},#{order_addr1},#{order_addr2},#{order_addr3},#{order_msg},0);


insert into `order`
 values (default,'회원1',now(),(select product_price from product where product_id=2),
'수령인입니다',null,'01057459996','077','강서구화곡동','까치산꿀주먹','일년후에배달해주세요',0);    테스트 성공함.



//////order_detail 입력-------------------------------------
insert into `order_detail`
 values 
(default,(select order_id from `order` where order_date = (select max(order_date) from `order` where member_id='1111')),1,190000,4);
/////////////////////////
//////delivery 입력-----------------------------------
		(서브 쿼리문 )select truncate(rand()*100000000000000,0);-->randeom 난수 생성 + 소수점 삭제.
insert into delivery 
values
 (default,(select order_id from `order` where order_date = (select max(order_date) from `order` where member_id=#{member_id})),#{member_id},'비트택배',(select truncate(rand()*100000000000000,0)),0);
/////////////////////////
//////payment 입력 
insert into `payment` 
values
 (default,(select order_id from `order` where order_date = (select max(order_date) from `order` where member_id=#{member_id})),#{member_id},now(),#{order_detail_price},default);
/////////////////////////
/////////////주문 결제 버튼 누를 시 END

주문 옵션에서 갯수 n 개 만큼 order_amount에 곱함.

	  member_Vo 에서      product_price,  memeber_name				우편번호       아파트              동/호수    배송메세지.
//////////////////////////
////////////////////주문 결제 창에 필요한 쿼리문.



///////// 장바구니 담기

insert into `cart` values (null,) where product_id=#{product_id};

select * from `order` where member_id=#{value}   ---->>> 장바구니에 필요한 쿼리.
select * from `product` where product_id=#{value}
/////////////////







